
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COLON COMM COMMA DIVIDE ELSE ENDFILE EQUALS GET GT ID IF INT LBRACK LCURLY LET LPAREN LT MINUS NEQUALS NUM PLUS RBRACK RCURLY RETURN RPAREN TIMES VOID WHILEprogram : declaration_list ENDFILEtype_specifier : VOID \n                      | INTdeclaration_list  : declaration\n                         | declaration_list declarationdeclaration : var_declaration\n                   | function_definitionvar_declaration : type_specifier ID COLONvar_declaration : type_specifier ID LBRACK NUM RBRACK COLONfunction_definition : type_specifier ID LPAREN params RPAREN compound_statementparams : param_list\n              | VOID\n    param_list : parameter_declaration\n                  | param_list COMMA parameter_declaration\n    parameter_declaration : type_specifier ID\n                             | type_specifier ID LBRACK RBRACK\n    compound_statement : LCURLY local_declarations statement_list RCURLY\n    local_declarations : local_declarations var_declaration\n                          | empty\n    statement_list : statement_list statement\n                      | empty\n    statement : expression_statement\n                 | compound_statement\n                 | selection_statement\n                 | iteration_statement\n                 | return_statement\n    expression_statement : expression COLON\n                            | COLON\n    selection_statement : IF LPAREN expression RPAREN statement\n                           | IF LPAREN expression RPAREN statement ELSE statement\n    iteration_statement : WHILE LPAREN expression RPAREN statementreturn_statement : RETURN COLON\n                        | RETURN expression COLON\n    expression : var ASSIGN expression\n                  | simple_expression\n    var : ID\n           | ID LBRACK expression RBRACK\n    simple_expression : additive_expression relop additive_expression\n                         | additive_expression\n    relop : LT\n             | LET\n             | GT\n             | GET\n             | EQUALS\n             | NEQUALS\n    additive_expression : additive_expression addop term\n                           | term\n    addop : PLUS\n             | MINUS\n    term : term multop factor\n            | factor\n    multop : TIMES\n              | DIVIDE\n    factor : LPAREN expression RPAREN\n              | var\n              | call\n              | num_lit\n    num_lit : NUMcall : ID LPAREN args RPARENargs : arg_list \n            | empty\n    arg_list : arg_list COMMA expression\n                | expression\n    empty :'
    
_lr_action_items = {'VOID':([0,2,3,4,5,10,12,14,24,25,27,28,31,32,34,37,],[7,7,-4,-6,-7,-5,-8,19,7,-9,-10,-64,7,-19,-18,-17,]),'INT':([0,2,3,4,5,10,12,14,24,25,27,28,31,32,34,37,],[8,8,-4,-6,-7,-5,-8,8,8,-9,-10,-64,8,-19,-18,-17,]),'$end':([1,9,],[0,-1,]),'ENDFILE':([2,3,4,5,10,12,25,27,37,],[9,-4,-6,-7,-5,-8,-9,-10,-17,]),'ID':([6,7,8,12,16,19,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,49,60,61,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,96,97,100,101,102,104,105,],[11,-2,-3,-8,22,-2,-9,-64,-64,-19,52,-18,-21,59,-17,-20,-22,-23,-24,-25,-26,-28,52,52,-27,52,52,-32,52,52,52,52,52,-40,-41,-42,-43,-44,-45,-48,-49,52,-52,-53,-33,52,52,52,-29,-31,52,-30,]),'COLON':([11,12,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,60,64,65,83,85,86,92,93,94,95,96,97,98,99,101,102,104,105,],[12,-8,25,-9,-64,-64,-19,45,-18,-21,-17,-20,-22,-23,-24,-25,-26,60,-28,64,-55,-35,-36,-39,-47,-51,-56,-57,-58,12,-27,-32,85,-54,-33,-34,-38,-55,-46,-50,45,45,-37,-59,-29,-31,45,-30,]),'LBRACK':([11,22,52,59,],[13,26,67,13,]),'LPAREN':([11,12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,46,47,48,49,52,60,61,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,96,97,100,101,102,104,105,],[14,-8,-9,-64,-64,-19,47,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,61,47,63,47,68,-27,47,47,-32,47,47,47,47,47,-40,-41,-42,-43,-44,-45,-48,-49,47,-52,-53,-33,47,47,47,-29,-31,47,-30,]),'RCURLY':([12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,60,64,85,101,102,105,],[-8,-9,-64,-64,-19,37,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,-29,-31,-30,]),'LCURLY':([12,23,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,60,64,85,96,97,101,102,104,105,],[-8,28,-9,-64,-64,-19,28,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,28,28,-29,-31,28,-30,]),'IF':([12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,60,64,85,96,97,101,102,104,105,],[-8,-9,-64,-64,-19,46,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,46,46,-29,-31,46,-30,]),'WHILE':([12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,60,64,85,96,97,101,102,104,105,],[-8,-9,-64,-64,-19,48,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,48,48,-29,-31,48,-30,]),'RETURN':([12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,60,64,85,96,97,101,102,104,105,],[-8,-9,-64,-64,-19,49,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,49,49,-29,-31,49,-30,]),'NUM':([12,13,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,47,49,60,61,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,96,97,100,101,102,104,105,],[-8,15,-9,-64,-64,-19,58,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,58,58,-27,58,58,-32,58,58,58,58,58,-40,-41,-42,-43,-44,-45,-48,-49,58,-52,-53,-33,58,58,58,-29,-31,58,-30,]),'RBRACK':([15,26,50,51,52,53,54,55,56,57,58,83,86,87,92,93,94,95,98,99,],[21,30,-55,-35,-36,-39,-47,-51,-56,-57,-58,-54,-34,98,-38,-55,-46,-50,-37,-59,]),'RPAREN':([17,18,19,20,22,29,30,50,51,52,53,54,55,56,57,58,62,68,82,83,84,86,88,89,90,91,92,93,94,95,98,99,103,],[23,-11,-12,-13,-15,-14,-16,-55,-35,-36,-39,-47,-51,-56,-57,-58,83,-64,96,-54,97,-34,99,-60,-61,-63,-38,-55,-46,-50,-37,-59,-62,]),'COMMA':([18,20,22,29,30,50,51,52,53,54,55,56,57,58,83,86,89,91,92,93,94,95,98,99,103,],[24,-13,-15,-14,-16,-55,-35,-36,-39,-47,-51,-56,-57,-58,-54,-34,100,-63,-38,-55,-46,-50,-37,-59,-62,]),'ELSE':([37,39,40,41,42,43,45,60,64,85,101,102,105,],[-17,-22,-23,-24,-25,-26,-28,-27,-32,-33,104,-31,-30,]),'ASSIGN':([50,52,98,],[66,-36,-37,]),'TIMES':([50,52,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,80,-51,-56,-57,-58,-54,-55,80,-50,-37,-59,]),'DIVIDE':([50,52,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,81,-51,-56,-57,-58,-54,-55,81,-50,-37,-59,]),'LT':([50,52,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,71,-47,-51,-56,-57,-58,-54,-55,-46,-50,-37,-59,]),'LET':([50,52,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,72,-47,-51,-56,-57,-58,-54,-55,-46,-50,-37,-59,]),'GT':([50,52,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,73,-47,-51,-56,-57,-58,-54,-55,-46,-50,-37,-59,]),'GET':([50,52,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,74,-47,-51,-56,-57,-58,-54,-55,-46,-50,-37,-59,]),'EQUALS':([50,52,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,75,-47,-51,-56,-57,-58,-54,-55,-46,-50,-37,-59,]),'NEQUALS':([50,52,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,76,-47,-51,-56,-57,-58,-54,-55,-46,-50,-37,-59,]),'PLUS':([50,52,53,54,55,56,57,58,83,92,93,94,95,98,99,],[-55,-36,77,-47,-51,-56,-57,-58,-54,77,-55,-46,-50,-37,-59,]),'MINUS':([50,52,53,54,55,56,57,58,83,92,93,94,95,98,99,],[-55,-36,78,-47,-51,-56,-57,-58,-54,78,-55,-46,-50,-37,-59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'var_declaration':([0,2,31,],[4,4,34,]),'function_definition':([0,2,],[5,5,]),'type_specifier':([0,2,14,24,31,],[6,6,16,16,36,]),'params':([14,],[17,]),'param_list':([14,],[18,]),'parameter_declaration':([14,24,],[20,29,]),'compound_statement':([23,33,96,97,104,],[27,40,40,40,40,]),'local_declarations':([28,],[31,]),'empty':([28,31,68,],[32,35,90,]),'statement_list':([31,],[33,]),'statement':([33,96,97,104,],[38,101,102,105,]),'expression_statement':([33,96,97,104,],[39,39,39,39,]),'selection_statement':([33,96,97,104,],[41,41,41,41,]),'iteration_statement':([33,96,97,104,],[42,42,42,42,]),'return_statement':([33,96,97,104,],[43,43,43,43,]),'expression':([33,47,49,61,63,66,67,68,96,97,100,104,],[44,62,65,82,84,86,87,91,44,44,103,44,]),'var':([33,47,49,61,63,66,67,68,69,70,79,96,97,100,104,],[50,50,50,50,50,50,50,50,93,93,93,50,50,50,50,]),'simple_expression':([33,47,49,61,63,66,67,68,96,97,100,104,],[51,51,51,51,51,51,51,51,51,51,51,51,]),'additive_expression':([33,47,49,61,63,66,67,68,69,96,97,100,104,],[53,53,53,53,53,53,53,53,92,53,53,53,53,]),'term':([33,47,49,61,63,66,67,68,69,70,96,97,100,104,],[54,54,54,54,54,54,54,54,54,94,54,54,54,54,]),'factor':([33,47,49,61,63,66,67,68,69,70,79,96,97,100,104,],[55,55,55,55,55,55,55,55,55,55,95,55,55,55,55,]),'call':([33,47,49,61,63,66,67,68,69,70,79,96,97,100,104,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'num_lit':([33,47,49,61,63,66,67,68,69,70,79,96,97,100,104,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'relop':([53,],[69,]),'addop':([53,92,],[70,70,]),'multop':([54,94,],[79,79,]),'args':([68,],[88,]),'arg_list':([68,],[89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list ENDFILE','program',2,'p_root','globalTypes.py',144),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','globalTypes.py',149),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','globalTypes.py',150),
  ('declaration_list -> declaration','declaration_list',1,'p_root_statement','globalTypes.py',156),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_root_statement','globalTypes.py',157),
  ('declaration -> var_declaration','declaration',1,'p_external_declaration','globalTypes.py',166),
  ('declaration -> function_definition','declaration',1,'p_external_declaration','globalTypes.py',167),
  ('var_declaration -> type_specifier ID COLON','var_declaration',3,'p_var_declaration','globalTypes.py',172),
  ('var_declaration -> type_specifier ID LBRACK NUM RBRACK COLON','var_declaration',6,'p_var_declaration_array','globalTypes.py',178),
  ('function_definition -> type_specifier ID LPAREN params RPAREN compound_statement','function_definition',6,'p_function_definition','globalTypes.py',185),
  ('params -> param_list','params',1,'p_function_declarator_simple','globalTypes.py',191),
  ('params -> VOID','params',1,'p_function_declarator_simple','globalTypes.py',192),
  ('param_list -> parameter_declaration','param_list',1,'p_param_list','globalTypes.py',198),
  ('param_list -> param_list COMMA parameter_declaration','param_list',3,'p_param_list','globalTypes.py',199),
  ('parameter_declaration -> type_specifier ID','parameter_declaration',2,'p_parameter_declaration','globalTypes.py',209),
  ('parameter_declaration -> type_specifier ID LBRACK RBRACK','parameter_declaration',4,'p_parameter_declaration','globalTypes.py',210),
  ('compound_statement -> LCURLY local_declarations statement_list RCURLY','compound_statement',4,'p_compound_statement','globalTypes.py',217),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','globalTypes.py',223),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','globalTypes.py',224),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','globalTypes.py',233),
  ('statement_list -> empty','statement_list',1,'p_statement_list','globalTypes.py',234),
  ('statement -> expression_statement','statement',1,'p_statement','globalTypes.py',243),
  ('statement -> compound_statement','statement',1,'p_statement','globalTypes.py',244),
  ('statement -> selection_statement','statement',1,'p_statement','globalTypes.py',245),
  ('statement -> iteration_statement','statement',1,'p_statement','globalTypes.py',246),
  ('statement -> return_statement','statement',1,'p_statement','globalTypes.py',247),
  ('expression_statement -> expression COLON','expression_statement',2,'p_expression_statement','globalTypes.py',253),
  ('expression_statement -> COLON','expression_statement',1,'p_expression_statement','globalTypes.py',254),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','globalTypes.py',261),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','globalTypes.py',262),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','globalTypes.py',269),
  ('return_statement -> RETURN COLON','return_statement',2,'p_return_statement','globalTypes.py',274),
  ('return_statement -> RETURN expression COLON','return_statement',3,'p_return_statement','globalTypes.py',275),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','globalTypes.py',281),
  ('expression -> simple_expression','expression',1,'p_expression','globalTypes.py',282),
  ('var -> ID','var',1,'p_var','globalTypes.py',291),
  ('var -> ID LBRACK expression RBRACK','var',4,'p_var','globalTypes.py',292),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','globalTypes.py',301),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','globalTypes.py',302),
  ('relop -> LT','relop',1,'p_relop','globalTypes.py',311),
  ('relop -> LET','relop',1,'p_relop','globalTypes.py',312),
  ('relop -> GT','relop',1,'p_relop','globalTypes.py',313),
  ('relop -> GET','relop',1,'p_relop','globalTypes.py',314),
  ('relop -> EQUALS','relop',1,'p_relop','globalTypes.py',315),
  ('relop -> NEQUALS','relop',1,'p_relop','globalTypes.py',316),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','globalTypes.py',322),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','globalTypes.py',323),
  ('addop -> PLUS','addop',1,'p_addop','globalTypes.py',332),
  ('addop -> MINUS','addop',1,'p_addop','globalTypes.py',333),
  ('term -> term multop factor','term',3,'p_term','globalTypes.py',339),
  ('term -> factor','term',1,'p_term','globalTypes.py',340),
  ('multop -> TIMES','multop',1,'p_multop','globalTypes.py',349),
  ('multop -> DIVIDE','multop',1,'p_multop','globalTypes.py',350),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','globalTypes.py',356),
  ('factor -> var','factor',1,'p_factor','globalTypes.py',357),
  ('factor -> call','factor',1,'p_factor','globalTypes.py',358),
  ('factor -> num_lit','factor',1,'p_factor','globalTypes.py',359),
  ('num_lit -> NUM','num_lit',1,'p_num_lit','globalTypes.py',367),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','globalTypes.py',371),
  ('args -> arg_list','args',1,'p_args','globalTypes.py',376),
  ('args -> empty','args',1,'p_args','globalTypes.py',377),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','globalTypes.py',383),
  ('arg_list -> expression','arg_list',1,'p_arg_list','globalTypes.py',384),
  ('empty -> <empty>','empty',0,'p_empty','globalTypes.py',395),
]
